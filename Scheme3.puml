@startuml
'https://plantuml.com/class-diagram

namespace MainGuiThread {
    class GUI {
        + dynamic_storage: DynamicStorage
        + menu: Menu
        + field: Field
    }

    class Field {
        + header_line: list[Button, Label, ...]
        + table
        + chat
        + active_table
        + active_table_name
        + create_table()
        + update_table()
        + update_fixed_table()
        + update_added_table()
    }

    class Menu {
        + line: list[Button, Label]
        + system_lines: list[list[Button, Label]]]
        + create_button(label, tabel or func)
        + create_label(label)
        + create_edit(label, func)
    }
    enum Buttons {
        + attr_name = label, table
        ...
    }
    enum Labels {
        + attr_name = label
        ...
    }
    GUI <-- Menu
    Menu <-- Buttons
    Menu <-- Labels

    GUI <-- Field
    Field <-- Buttons
    Field <-- Labels
}


namespace storage_thread{

    class Storage {
        + reader: Reader
        + reader_thread: Thread
        + cycle_messgages: list[Message]
        + time_stamp: TimeStamp
        + Filtrator
        + GPS:GnssSystem
        + GLONASS: GnssSystem
        + satellites: list[Satellite]
        + pseudoranges: PseudoRanges
        + rec_positions: HistoricalPosition
        + update(message)
        + update_cycle()
        + get_tables() -> DynamicStorage
'        + filtrator: Filtrator
        + LK_filter(last_prediction, measurements)
    }

    class PseudoRanges {
        + measurements: list[BasePR]
        + filtered: list[FilteredLine]
        + get(svId, gnssId)
    }
    class BasePR {
        + stamp: TimeStamp
        + prs: list[float]
    }

    class Filtrator {
        + positions: dict[Source, LKPosition]
         ...
    }

    class GnssSystem {
        + gnssId: GNSS
        + system_params: Struct
        + satellites: dict[int, Satellite]
        + alm_positions: LKPosition
        + eph_positions: LKPosition
    }

    class Satellite {
        + alm_calculator: SCC
        + alm_parameters: types.SimpleNamespace
        + alm_positions: Position
        + eph_calculator: SCC
        + eph_parameters: types.SimpleNamespace
        + eph_positions: Position
        + parameters: Struct
        + scores
        - get_pseudorange(*svIds)
        + update_parameters(data: dict, Message)
        + update()
    }


    class LKPosition {
        + const history_len
        + coords_format: FormatCoords
        + measurements: list[BasePosition]
        + xyz_filtered: list[FilteredLine]
        + lla_filtered: list[FilteredLine]
        + update(stamp, xyz)
        + last_position()
        + last_filtered_xyz()
        + last_filtered_lla()
    }

    class Position {
        - const history_len
        + measurements: list[BasePosition]
        + update(stamp, xyz)
        + last_position()
    }

    class FilteredLine {
        + stamp: TimeStamp
        + data: np.array
        + P: np.matrix
    }

    class BasePosition {
        + lla()
        + par()
        + stamp: TimeStamp
        + xyz: np.array
    }


    interface SatelliteCoordinateCalculator {
        + __init__(Satellite, gnssId, methodType)
        + coordinate_func: function
        + get_coord(stamp: TimeStamp) -> Position
        + choose_func(source: Source)
        ~ calc_gps_alm()
        ~ calc_gps_eph()
        ~ calc_glo_alm()
        ~ calc_glo_eph()
    }

    interface Minimizing{
        ~ residual()
        ~ jac()
        ~ solve_navigation_task(satellites)
    }

    class StorageThread {
        + storage: Storage
        + next()
    }

    class DynamicStorage {
        + tables: dict[pd.DataFrame[TableCell]]
        + cycle_messages: list[Message]
        + parse_data_to_table()
    }

    class TableCell {
        + data: float, int
        + cell: str, float, int
        + updated: bool
        + color: Colors
        + check(data)
    }


    enum CellParsers{
        + PrMes: function -> cell, color
        ...
    }


    TableCell <-- CellParsers

    Storage <-- GnssSystem
    Storage <-- Position
    Storage <-- PseudoRanges
    Storage <-- Filtrator

    GnssSystem <-- LKPosition
    GnssSystem <-- Satellite
    GnssSystem <.. Minimizing

    Satellite <-- SatelliteCoordinateCalculator
    Satellite <-- Position

    SatelliteCoordinateCalculator <-- RK45

    Position <-- FilteredLine
    Position <-- BasePosition


    StorageThread <-- DynamicStorage
    StorageThread <-- Storage

    DynamicStorage <.. Storage
    DynamicStorage <-- TableCell

    GUI <-- StorageThread

    LKPosition <|-- Position

    PseudoRanges <-- BasePR
    PseudoRanges <-- FilteredLine

}



namespace reader_thread {
    class Reader {
        + stream: Serial
        + next()
        + tune_module()
        + pool_next()
        + send()
        + read_next_message()
    }

    Reader <-- Messages

    abstract Messages {
        ~ pool_messages: list
        ~ tune_messages: list
        ~ set_rate()
        ~ check_rate()
    }
'    Messages <.. UBXMessages
    Messages <.. NMEAMessages
    Messages <.. UtilsMessages
    UBXMessages <|-- Message
    NMEAMessages <|-- Message


    RXM_RAWX <|-- UBXMessages
    NAV_SAT <|-- UBXMessages
    NAV_ORB <|-- UBXMessages
    RXM_SVSI <|-- UBXMessages
    RXM_MEASX <|-- UBXMessages
    RXM_SFRBX <|-- UBXMessages
    NAV_TIMEGPS <|-- UBXMessages
    NAV_POSECEF <|-- UBXMessages
    NAV_VELECEF <|-- UBXMessages
    AID_EPH <|-- UBXMessages
    AID_ALM <|-- UBXMessages

    Messages <-- RXM_RAWX
    Messages <-- NAV_SAT
    Messages <-- NAV_ORB
    Messages <-- RXM_SVSI
    Messages <-- RXM_MEASX
    Messages <-- RXM_SFRBX
    Messages <-- NAV_TIMEGPS
    Messages <-- NAV_POSECEF
    Messages <-- NAV_VELECEF
    Messages <-- AID_EPH
    Messages <-- AID_ALM


}


Storage <-- Reader

namespace Other {
    abstract Constants {
        ~ tz_moscow
        ~ tz_utc
        ~ gps_epoch
        ~ glonass_epoch
        ~ glonass_4years
        ~ week_seconds
        ~ leapS
        ~ STEP
        ~ ApproximateGPSAltitude
        ~ ApproximateEarthRadius
        ~ OmegaEarthDot
        ~ mu
        ~ ae_glonass
        ~ J20_glonass
        ~ c
        ~ az
        ~ alphaz
        ~ bz
        ~ a
        ~ alpha
        ~ b
    }

    abstract Settings {
        ~ BaudRate
        ~ BaseBaudRate
        ~ SerialPort
        ~ timeout
        ~ MaximumMinimizingSatellitesCount
        ~ MinimumMinimizingSatellitesCount
        ~ ReaderPoolStep
        ~ ReaderPoolStart
        ~ SaveRawFlag
        ~ SaveParsedFlag
        ~ raw_logger
        ~ parsed_logger
        ~ PrintNoiseFlag
        ~ PrintParsedFlag
        ~ PrintRawFlag
        ~ used_method
        ~ using_methods
        ~ max_calc_time
        ~ GUI_ON

    }

    enum GNSS {
        + GPS = 0
        + SBAS = 1
        + Galileo = 2
        + BeiDou = 3
        + IMEA = 4
        + QZSS = 5
        + GLONASS = 6
        + default = -1
    }
    enum Source {
        + receiver = -100
        + GPS_alm = 1000
        + GPS_eph = 2000
        + GLONASS_alm = 1600
        + GLONASS_eph = 2600
        ...
    }

    enum DataType {
        + ALM = 1000
        + EPH = 2000
    }

    enum FormatCoords {
        + XYZ = 0x01 << 14
        + LLA = 0x10 << 14
        + Both = 0x11 < 14
    }

    abstract Kalman {
        ~ LinearFilter(FilteredLine) -> FilteredLine
    }

    class TimeStamp {
        + dt: datetime.datetime
        + week: int
        + TOW: float
        + N4: int
        + N: int
        + t: float
        + __init__(*args, **kwargs, type=GNSS.default)
        + dt2gps()
        + dt2glonass()
        + gps2dt()
        + glonass2dt()
        ~ BASE_TIME_STAMP = TimeStamp
        ~ calc_julian_day()
    }
}


@enduml